<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Temperature Converter</title>
    <style>
        /* CSS Styles */
        :root {
            --primary: #6c5ce7;
            --secondary: #00cec9;
            --accent: #fd79a8;
            --light: #f8f9fa;
            --dark: #2d3436;
            --celsius: #0984e3;
            --fahrenheit: #e17055;
            --kelvin: #00b894;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: var(--light);
            animation: gradientShift 15s ease infinite;
            background-size: 400% 400%;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            background-color: rgba(45, 52, 54, 0.85);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2.5rem;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
            text-align: center;
            transition: transform 0.3s ease;
        }

        .container:hover {
            transform: translateY(-5px);
        }

        h1 {
            margin-top: 0;
            margin-bottom: 1.5rem;
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            color: white;
            position: relative;
            display: inline-block;
        }

        h1::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: var(--accent);
            border-radius: 2px;
        }

        .converter {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .input-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        label {
            font-weight: bold;
            text-align: left;
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.1rem;
        }

        input, select {
            padding: 12px 15px;
            border: none;
            border-radius: 8px;
            background-color: rgba(255, 255, 255, 0.15);
            color: white;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            outline: none;
        }

        input:focus, select:focus {
            background-color: rgba(255, 255, 255, 0.25);
            box-shadow: 0 0 0 2px var(--accent);
        }

        input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .unit-selector {
            display: flex;
            justify-content: space-between;
            gap: 10px;
        }

        .unit-btn {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 8px;
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .unit-btn.active {
            background-color: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .unit-btn.celsius.active {
            background-color: var(--celsius);
        }

        .unit-btn.fahrenheit.active {
            background-color: var(--fahrenheit);
        }

        .unit-btn.kelvin.active {
            background-color: var(--kelvin);
        }

        .unit-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: 0.5s;
        }

        .unit-btn:hover::before {
            left: 100%;
        }

        .results {
            margin-top: 1rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .result-card {
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .result-card:hover {
            background-color: rgba(255, 255, 255, 0.2);
            transform: translateX(5px);
        }

        .result-value {
            font-size: 1.3rem;
            font-weight: bold;
        }

        .result-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .celsius-card {
            border-left: 4px solid var(--celsius);
        }

        .fahrenheit-card {
            border-left: 4px solid var(--fahrenheit);
        }

        .kelvin-card {
            border-left: 4px solid var(--kelvin);
        }

        @media (max-width: 600px) {
            .container {
                padding: 1.5rem;
            }

            h1 {
                font-size: 2rem;
            }

            .unit-selector {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Temperature Converter</h1>
        <div class="converter">
            <div class="input-group">
                <label for="temperature">Temperature Value</label>
                <input type="number" id="temperature" placeholder="Enter temperature" step="0.01">
            </div>
            
            <div class="input-group">
                <label>From Unit</label>
                <div class="unit-selector">
                    <button class="unit-btn celsius active" data-unit="celsius">°C (Celsius)</button>
                    <button class="unit-btn fahrenheit" data-unit="fahrenheit">°F (Fahrenheit)</button>
                    <button class="unit-btn kelvin" data-unit="kelvin">K (Kelvin)</button>
                </div>
            </div>
            
            <div class="results">
                <div class="result-card celsius-card">
                    <span class="result-label">Celsius</span>
                    <span class="result-value" id="celsius-result">0.00 °C</span>
                </div>
                <div class="result-card fahrenheit-card">
                    <span class="result-label">Fahrenheit</span>
                    <span class="result-value" id="fahrenheit-result">32.00 °F</span>
                </div>
                <div class="result-card kelvin-card">
                    <span class="result-label">Kelvin</span>
                    <span class="result-value" id="kelvin-result">273.15 K</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        // JavaScript
        document.addEventListener('DOMContentLoaded', () => {
            // DOM elements
            const temperatureInput = document.getElementById('temperature');
            const unitButtons = document.querySelectorAll('.unit-btn');
            const celsiusResult = document.getElementById('celsius-result');
            const fahrenheitResult = document.getElementById('fahrenheit-result');
            const kelvinResult = document.getElementById('kelvin-result');
            
            // Current selected unit
            let currentUnit = 'celsius';
            
            // Event listeners
            temperatureInput.addEventListener('input', convertTemperatures);
            
            unitButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Remove active class from all buttons
                    unitButtons.forEach(btn => btn.classList.remove('active'));
                    
                    // Add active class to clicked button
                    button.classList.add('active');
                    currentUnit = button.dataset.unit;
                    
                    // Convert temperatures
                    convertTemperatures();
                });
            });
            
            // Conversion functions
            function convertTemperatures() {
                const inputValue = parseFloat(temperatureInput.value) || 0;
                let celsius, fahrenheit, kelvin;
                
                switch(currentUnit) {
                    case 'celsius':
                        celsius = inputValue;
                        fahrenheit = (celsius * 9/5) + 32;
                        kelvin = celsius + 273.15;
                        break;
                    case 'fahrenheit':
                        fahrenheit = inputValue;
                        celsius = (fahrenheit - 32) * 5/9;
                        kelvin = celsius + 273.15;
                        break;
                    case 'kelvin':
                        kelvin = inputValue;
                        celsius = kelvin - 273.15;
                        fahrenheit = (celsius * 9/5) + 32;
                        break;
                }
                
                // Update results
                celsiusResult.textContent = celsius.toFixed(2) + ' °C';
                fahrenheitResult.textContent = fahrenheit.toFixed(2) + ' °F';
                kelvinResult.textContent = kelvin.toFixed(2) + ' K';
                
                // Color animation for changed values
                if (currentUnit !== 'celsius') {
                    animateResult(celsiusResult);
                }
                if (currentUnit !== 'fahrenheit') {
                    animateResult(fahrenheitResult);
                }
                if (currentUnit !== 'kelvin') {
                    animateResult(kelvinResult);
                }
            }
            
            // Animation for result change
            function animateResult(element) {
                element.style.transform = 'scale(1.1)';
                element.style.color = '#fff';
                
                setTimeout(() => {
                    element.style.transform = 'scale(1)';
                    setTimeout(() => {
                        element.style.color = '';
                    }, 300);
                }, 300);
            }
            
            // Initialize with default values
            convertTemperatures();
        });
    </script>
</body>
</html>
